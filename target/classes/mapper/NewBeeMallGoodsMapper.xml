<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ltd.newbee.mall.dao.NewBeeMallGoodsMapper">
	<resultMap id="BaseResultMap"
		type="ltd.newbee.mall.entity.NewBeeMallGoods">
		<id column="goods_id" jdbcType="BIGINT" property="goodsId" />
		<result column="goods_name" jdbcType="VARCHAR"
			property="goodsName" />
		<result column="goods_intro" jdbcType="VARCHAR"
			property="goodsIntro" />
		<result column="goods_category_id" jdbcType="BIGINT"
			property="goodsCategoryId" />
		<result column="goods_cover_img" jdbcType="VARCHAR"
			property="goodsCoverImg" />
		<result column="goods_carousel" jdbcType="VARCHAR"
			property="goodsCarousel" />
		<result column="original_price" jdbcType="INTEGER"
			property="originalPrice" />
		<result column="selling_price" jdbcType="INTEGER"
			property="sellingPrice" />
		<result column="stock_num" jdbcType="INTEGER"
			property="stockNum" />
		<result column="tag" jdbcType="VARCHAR" property="tag" />
		<result column="goods_sell_status" jdbcType="TINYINT"
			property="goodsSellStatus" />
		<result column="create_user" jdbcType="INTEGER"
			property="createUser" />
		<result column="create_time" jdbcType="TIMESTAMP"
			property="createTime" />
		<result column="update_user" jdbcType="INTEGER"
			property="updateUser" />
		<result column="update_time" jdbcType="TIMESTAMP"
			property="updateTime" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
		type="ltd.newbee.mall.entity.NewBeeMallGoods">
		<result column="goods_detail_content" jdbcType="LONGVARCHAR"
			property="goodsDetailContent" />
	</resultMap>
	<sql id="Base_Column_List">
		goods_id, goods_name, goods_intro,goods_category_id,
		goods_cover_img,
		goods_carousel, original_price,
		selling_price,
		stock_num, tag, goods_sell_status, create_user, create_time,
		update_user,
		update_time
	</sql>
	<sql id="Blob_Column_List">
		goods_detail_content
	</sql>

	<insert id="batchInsert">
		INSERT INTO tb_newbee_mall_goods_info(goods_name, goods_intro,
		goods_category_id,goods_cover_img,
		goods_carousel,
		goods_detail_content,original_price,
		selling_price, stock_num)
		VALUES
		<foreach collection="newBeeMallGoodsList" item="goods"
			separator=",">
			(#{goods.goodsName},#{goods.goodsIntro},#{goods.goodsCategoryId},#{goods.goodsCoverImg},#{goods.goodsCarousel},#{goods.goodsDetailContent},#{goods.originalPrice},#{goods.sellingPrice},#{goods.stockNum})
		</foreach>
	</insert>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_newbee_mall_goods_info
		where goods_id =
		#{goodsId,jdbcType=BIGINT}
	</select>
	<select id="selectByCategoryIdAndName"
		resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_newbee_mall_goods_info
		where goods_name =
		#{goodsName,jdbcType=VARCHAR} and goods_category_id =
		#{goodsCategoryId,jdbcType=BIGINT}
	</select>
	<update id="updateStockNum">
		<foreach collection="stockNumDTOS" item="stockNumDTO">
			update
			tb_newbee_mall_goods_info set stock_num =
			stock_num-#{stockNumDTO.goodsCount}
			where goods_id =
			#{stockNumDTO.goodsId} and
			stock_num>=#{stockNumDTO.goodsCount} and
			goods_sell_status = 0;
		</foreach>
	</update>
	<update id="batchUpdateSellStatus">
		update tb_newbee_mall_goods_info
		set
		goods_sell_status=#{sellStatus},update_time=now() where goods_id in
		<foreach item="id" collection="orderIds" open="("
			separator="," close=")">
			#{id}
		</foreach>
	</update>
	<select id="findNewBeeMallGoodsList" parameterType="Map"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_newbee_mall_goods_info
		<where>
			<if test="goodsName!=null and goodsName!=''">
				and goods_name like CONCAT('%','#{goodsName}','%')
			</if>
			<if test="goodsSellStatus!=null and goodsSellStatus!=''">
				and goods_sell_status = #{goodsSellStatus}
			</if>
			<if test="startTime != null and startTime.trim() != ''">
				and create_time &gt; #{startTime}
			</if>
			<if test="endTime != null and endTime.trim() != ''">
				and create_time &lt; #{endTime}
			</if>
		</where>
		order by goods_id desc
		<if test="start!=null and limit!=null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="findNewBeeMallGoodsListBySearch" parameterType="Map"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_newbee_mall_goods_info
		<where>
			<if test="keyword!=null and keyword!=''">
				and (goods_name like CONCAT('%',#{keyword},'%') or
				goods_intro like
				CONCAT('%',#{keyword},'%'))
			</if>
			<if test="goodsCategoryId!=null and goodsCategoryId!=''">
				and goods_category_id = #{goodsCategoryId}
			</if>
			<if test="goodsSellStatus!=null">
				and goods_sell_status = #{goodsSellStatus}
			</if>
		</where>
		<if test="orderBy!=null and orderBy!=''">
			<choose>
				<when test="orderBy == 'new'">
					<!-- 按照发布时间倒序排列 -->
					order by goods_id desc
				</when>
				<when test="orderBy == 'price'">
					<!-- 按照售价从小到大排列 -->
					order by selling_price asc
				</when>
				<otherwise>
					<!-- 默认按照库存数量从大到小排列 -->
					order by stock_num desc
				</otherwise>
			</choose>
		</if>
		<if test="start!=null and limit!=null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="getTotalNewBeeMallGoodsBySearch" parameterType="Map"
		resultType="int">
		select count(*) from tb_newbee_mall_goods_info
		<where>
			<if test="keyword!=null and keyword!=''">
				and (goods_name like CONCAT('%',#{keyword},'%') or
				goods_intro like
				CONCAT('%',#{keyword},'%'))
			</if>
			<if test="goodsCategoryId!=null and goodsCategoryId!=''">
				and goods_category_id = #{goodsCategoryId}
			</if>
			<if test="goodsSellStatus!=null">
				and goods_sell_status = #{goodsSellStatus}
			</if>
		</where>
	</select>

	<select id="selectByPrimaryKeys" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_newbee_mall_goods_info
		where goods_id in
		<foreach item="id" collection="list" open="(" separator=","
			close=")">
			#{id}
		</foreach>
		order by field(goods_id,
		<foreach item="id" collection="list" separator=",">
			#{id}
		</foreach>
		);
	</select>
	<select id="getTotalNewBeeMallGoods" parameterType="Map"
		resultType="int">
		select count(*) from tb_newbee_mall_goods_info
		<where>
			<if test="goodsName!=null and goodsName!=''">
				and goods_name like CONCAT('%','#{goodsName}','%')
			</if>
			<if test="goodsSellStatus!=null and goodsSellStatus!=''">
				and goods_sell_status = #{goodsSellStatus}
			</if>
			<if test="startTime != null and startTime.trim() != ''">
				and create_time &gt; #{startTime}
			</if>
			<if test="endTime != null and endTime.trim() != ''">
				and create_time &lt; #{endTime}
			</if>
		</where>
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from
		tb_newbee_mall_goods_info
		where goods_id = #{goodsId,jdbcType=BIGINT}
	</delete>
	<insert id="insert"
		parameterType="ltd.newbee.mall.entity.NewBeeMallGoods">
		insert into tb_newbee_mall_goods_info (goods_id,
		goods_name, goods_intro,
		goods_cover_img, goods_carousel,
		original_price,
		selling_price, stock_num, tag,
		goods_sell_status,
		create_user, create_time,
		update_user, update_time,
		goods_detail_content
		)
		values (#{goodsId,jdbcType=BIGINT},
		#{goodsName,jdbcType=VARCHAR},
		#{goodsIntro,jdbcType=VARCHAR},
		#{goodsCoverImg,jdbcType=VARCHAR}, #{goodsCarousel,jdbcType=VARCHAR},
		#{originalPrice,jdbcType=INTEGER},
		#{sellingPrice,jdbcType=INTEGER},
		#{stockNum,jdbcType=INTEGER},
		#{tag,jdbcType=VARCHAR},
		#{goodsSellStatus,jdbcType=TINYINT}, #{createUser,jdbcType=INTEGER},
		#{createTime,jdbcType=TIMESTAMP},
		#{updateUser,jdbcType=INTEGER},
		#{updateTime,jdbcType=TIMESTAMP},
		#{goodsDetailContent,jdbcType=LONGVARCHAR}
		)
	</insert>
	<insert id="insertSelective"
		parameterType="ltd.newbee.mall.entity.NewBeeMallGoods">
		insert into tb_newbee_mall_goods_info
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="goodsId != null">
				goods_id,
			</if>
			<if test="goodsName != null">
				goods_name,
			</if>
			<if test="goodsIntro != null">
				goods_intro,
			</if>
			<if test="goodsCategoryId != null">
				goods_category_id,
			</if>
			<if test="goodsCoverImg != null">
				goods_cover_img,
			</if>
			<if test="goodsCarousel != null">
				goods_carousel,
			</if>
			<if test="originalPrice != null">
				original_price,
			</if>
			<if test="sellingPrice != null">
				selling_price,
			</if>
			<if test="stockNum != null">
				stock_num,
			</if>
			<if test="tag != null">
				tag,
			</if>
			<if test="goodsSellStatus != null">
				goods_sell_status,
			</if>
			<if test="createUser != null">
				create_user,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="updateUser != null">
				update_user,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
			<if test="goodsDetailContent != null">
				goods_detail_content,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="goodsId != null">
				#{goodsId,jdbcType=BIGINT},
			</if>
			<if test="goodsName != null">
				#{goodsName,jdbcType=VARCHAR},
			</if>
			<if test="goodsIntro != null">
				#{goodsIntro,jdbcType=VARCHAR},
			</if>
			<if test="goodsIntro != null">
				#{goodsCategoryId,jdbcType=BIGINT},
			</if>
			<if test="goodsCoverImg != null">
				#{goodsCoverImg,jdbcType=VARCHAR},
			</if>
			<if test="goodsCarousel != null">
				#{goodsCarousel,jdbcType=VARCHAR},
			</if>
			<if test="originalPrice != null">
				#{originalPrice,jdbcType=INTEGER},
			</if>
			<if test="sellingPrice != null">
				#{sellingPrice,jdbcType=INTEGER},
			</if>
			<if test="stockNum != null">
				#{stockNum,jdbcType=INTEGER},
			</if>
			<if test="tag != null">
				#{tag,jdbcType=VARCHAR},
			</if>
			<if test="goodsSellStatus != null">
				#{goodsSellStatus,jdbcType=TINYINT},
			</if>
			<if test="createUser != null">
				#{createUser,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateUser != null">
				#{updateUser,jdbcType=INTEGER},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="goodsDetailContent != null">
				#{goodsDetailContent,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="ltd.newbee.mall.entity.NewBeeMallGoods">
		update tb_newbee_mall_goods_info
		<set>
			<if test="goodsName != null">
				goods_name = #{goodsName,jdbcType=VARCHAR},
			</if>
			<if test="goodsIntro != null">
				goods_intro = #{goodsIntro,jdbcType=VARCHAR},
			</if>
			<if test="goodsCategoryId != null">
				goods_category_id = #{goodsCategoryId,jdbcType=BIGINT},
			</if>
			<if test="goodsCoverImg != null">
				goods_cover_img = #{goodsCoverImg,jdbcType=VARCHAR},
			</if>
			<if test="goodsCarousel != null">
				goods_carousel = #{goodsCarousel,jdbcType=VARCHAR},
			</if>
			<if test="originalPrice != null">
				original_price = #{originalPrice,jdbcType=INTEGER},
			</if>
			<if test="sellingPrice != null">
				selling_price = #{sellingPrice,jdbcType=INTEGER},
			</if>
			<if test="stockNum != null">
				stock_num = #{stockNum,jdbcType=INTEGER},
			</if>
			<if test="tag != null">
				tag = #{tag,jdbcType=VARCHAR},
			</if>
			<if test="goodsSellStatus != null">
				goods_sell_status = #{goodsSellStatus,jdbcType=TINYINT},
			</if>
			<if test="createUser != null">
				create_user = #{createUser,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateUser != null">
				update_user = #{updateUser,jdbcType=INTEGER},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="goodsDetailContent != null">
				goods_detail_content =
				#{goodsDetailContent,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where goods_id = #{goodsId,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs"
		parameterType="ltd.newbee.mall.entity.NewBeeMallGoods">
		update tb_newbee_mall_goods_info
		set goods_name =
		#{goodsName,jdbcType=VARCHAR},
		goods_intro =
		#{goodsIntro,jdbcType=VARCHAR},
		goods_cover_img =
		#{goodsCoverImg,jdbcType=VARCHAR},
		goods_carousel =
		#{goodsCarousel,jdbcType=VARCHAR},
		original_price =
		#{originalPrice,jdbcType=INTEGER},
		selling_price =
		#{sellingPrice,jdbcType=INTEGER},
		stock_num =
		#{stockNum,jdbcType=INTEGER},
		tag = #{tag,jdbcType=VARCHAR},
		goods_sell_status = #{goodsSellStatus,jdbcType=TINYINT},
		create_user =
		#{createUser,jdbcType=INTEGER},
		create_time =
		#{createTime,jdbcType=TIMESTAMP},
		update_user =
		#{updateUser,jdbcType=INTEGER},
		update_time =
		#{updateTime,jdbcType=TIMESTAMP},
		goods_detail_content =
		#{goodsDetailContent,jdbcType=LONGVARCHAR}
		where goods_id =
		#{goodsId,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="ltd.newbee.mall.entity.NewBeeMallGoods">
		update tb_newbee_mall_goods_info
		set goods_name =
		#{goodsName,jdbcType=VARCHAR},
		goods_intro =
		#{goodsIntro,jdbcType=VARCHAR},
		goods_cover_img =
		#{goodsCoverImg,jdbcType=VARCHAR},
		goods_carousel =
		#{goodsCarousel,jdbcType=VARCHAR},
		original_price =
		#{originalPrice,jdbcType=INTEGER},
		selling_price =
		#{sellingPrice,jdbcType=INTEGER},
		stock_num =
		#{stockNum,jdbcType=INTEGER},
		tag = #{tag,jdbcType=VARCHAR},
		goods_sell_status = #{goodsSellStatus,jdbcType=TINYINT},
		create_user =
		#{createUser,jdbcType=INTEGER},
		create_time =
		#{createTime,jdbcType=TIMESTAMP},
		update_user =
		#{updateUser,jdbcType=INTEGER},
		update_time =
		#{updateTime,jdbcType=TIMESTAMP}
		where goods_id =
		#{goodsId,jdbcType=BIGINT}
	</update>
	<select id="getGoodsInfoByPK" parameterType="Long"
		resultType="ltd.newbee.mall.entity.GoodsInfo">
		SELECT id,name,size,pa,weight,housyou,time,sizeOfPackage
		FROM GoodsInfo where id=#{id,jdbcType=BIGINT}
	</select>


	<select id="getGoodsImageByPk" parameterType="Long"
		resultType="ltd.newbee.mall.entity.GoodsImageEntity">
		select goods_id,image_url

		FROM goods_image where
		goods_id=#{goodsId,jdbcType=BIGINT}

	</select>


	<sql id="goods_info_list">
		goods_id,goods_name,goods_intro,goods_category_id,goods_cover_img,goods_carousel,goods_detail_content,original_price,selling_price,stock_num,tag,goods_sell_status,create_user,create_time,update_user,update_time
	</sql>

	<select id="getGoodsPage" parameterType="Map"
		resultType="ltd.newbee.mall.entity.NewBeeMallGoods">
		select
		<include refid="goods_info_list" />
		from tb_newbee_mall_goods_info
		<where>
			<if test="keyword!=null and keyword!=''">
				and goods_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="categoryId!=null and categoryId!=''">
				and goods_category_id=#{cat,jdbcType=INTEGER}
			</if>
		</where>
		<if test="orderBy!=null and orderBy!=''">
			<choose>
				<when test="orderBy == 'new'">
					按照发布时间倒序排列
					order by goods_id desc
				</when>
				<when test="orderBy == 'price'">
					按照售价从小到大排列
					order by selling_price asc
				</when>
				<otherwise>
					默认按照库存数量从大到小排列
					order by stock_num desc
				</otherwise>
			</choose>
		</if>
		<if test="start!=null and limit!=null">
			and limit #{start},3
		</if>
	</select>


	<select id="getGoodsQa" parameterType="Map"
		resultType="ltd.newbee.mall.entity.GoodsQa">
		select a.goods_id,a.qa_id,question,question_date,answer,answer_date
		,count(b.user_id) as count,b.user_id
		from goods_qa a
		left join qa_user b on a.goods_id= b.goods_id and a.qa_id
		= b.qa_id
		<where>
			and a.goods_id = #{goodsId,jdbcType=BIGINT}
		</where>
		group by goods_id,qa_id

		<choose>
			<when test="sort == 'new'">
				<!-- 按照发布时间倒序排列 -->
				order by question_date desc
			</when>
			<when test="sort == 'like'">
				<!-- 按照点赞数从小到大排列 -->
				order by count desc
			</when>
			<otherwise>
				order by question_date desc
			</otherwise>
		</choose>
		<if test="start!=null and limit!=null">
			limit #{start},#{limit}
		</if>
	</select>
	
	<select id="getQaLikeUserId" parameterType="Map" resultType="int">
		select count(*) FROM qa_user
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
			and qa_id = #{qaId,jdbcType=BIGINT}
			and user_id = #{userId,jdbcType=VARCHAR}
		</where>
	</select>
	
	<select id="getGoodsQaCount" parameterType="Long" resultType="Long">
		select count(qa_id) as countQa FROM goods_qa
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
		</where>
	</select>


	<select id="getGoodsReview" parameterType="Map"
		resultType="ltd.newbee.mall.entity.GoodsReview">
		select a.review_title,a.review,star,user_id,review_date,a.goods_id,
		image,count(user_id2)as count,a.review_id
		from goods_review a left join review_user
		b
		on a.review_title=b.review_title
		and a.review=b.review and
		a.goods_id=b.goods_id
		<!-- <where> and a.goods_id = #{goodsId,jdbcType=BIGINT} </where> <if test="reviewType 
			== 1"> 按照星级显示 <where> and a.star =　#{reviewRate,jdbcType=BIGINT} </where> 
			</if> -->
		<where>
			<if test="reviewType == 1">
				star = #{reviewRate}
			</if>
			and a.goods_id = #{goodsId}
		</where>
		group by review_title,review
		order by star desc,count desc
		<!-- ======= <select id="getGoodsQa" parameterType="Long" resultType="ltd.newbee.mall.entity.GoodsQa"> 
			select a.goods_id,b.qa_id,question, question_date,answer,answer_date,count(user_id)as 
			count from goods_qa a inner join qa_user b on a.goods_id=b.goods_id and a.qa_id=b.qa_id 
			group by goods_id,qa_id <if test="orderBy!=null and orderBy!=''"> <choose> 
			<when test="orderBy == 'like'"> 按照点赞次数由多到少排列 order by count desc </when> 
			<otherwise> 按照发布时间倒序排列 order by question_date desc </otherwise> </choose> 
			</if> <if test="start!=null and limit!=null"> and limit #{start},3 count(qa_id)as 
			count2 from qa_user pageNo=count2/3+1 </if> </select> <select id="getGoodsReview" 
			parameterType="Map" resultType="ltd.newbee.mall.entity.GoodsReview"> select 
			a.review_title,a.review,star,user_id,review_date,a.goods_id,,image,AVG(star),count(user_id2)as 
			count from goods_review a join review_user b on a.review_title=b.review_title 
			and a.review=b.review and a.goods_id=b.goods_id <if test="reviewType == 1"> 
			<where> a.goods_id = #{goodsId,jdbcType=BIGINT} </where> 按照星级显示 <if test="reviewRate 
			== 5"> <where> star=5 </where> </if> <if test="reviewRate == 4"> <where> 
			star=4 </where> </if> <if test="reviewRate == 3"> <where> star=3 </where> 
			</if> <if test="reviewRate == 2"> <where> star=2 </where> </if> <if test="reviewRate 
			== 1"> <where> star=1 </where> </if> </if> group by review_title,review order 
			by star desc,count desc >>>>>>> 2df8497344dca5199d56a7063ea99edae0cff42a -->
		<choose>
			<when test="reviewMore == 0">
				<!-- 先显示前三条 -->
				limit 0,3
			</when>
			<when test="reviewMore == 1">
				<!-- 交互后显示 -->
				limit 3,999999
			</when>
		</choose>

	</select>


	<select id="getRateAvg" parameterType="Long" resultType="double">
		select AVG(star) as rate_avg from goods_review
		<!-- ======= <select id="getGoodsReview" parameterType="Long" resultType="double"> 
			select AVG(star) from goods_review >>>>>>> 2df8497344dca5199d56a7063ea99edae0cff42a -->
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
		</where>
	</select>


	<select id="getReviewCount" parameterType="Long"
		resultType="Long">
		select count(review)as count1 from goods_review
		<!-- ======= <select id="getGoodsReview" parameterType="Long" resultType="Long"> 
			select count(review) from goods_review >>>>>>> 2df8497344dca5199d56a7063ea99edae0cff42a -->
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
		</where>
	</select>

	<select id="getRateCount" parameterType="Long" resultType="Long">
		select count(review) as count2 from goods_review
		<!-- ======= <select id="getGoodsReviewCount" parameterType="Long" resultType="Long"> 
			select star,count(review) from goods_review >>>>>>> 2df8497344dca5199d56a7063ea99edae0cff42a -->
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
		</where>
		group by star order by star desc
	</select>


	<insert id="insertGoodsReview"
		parameterType="ltd.newbee.mall.entity.GoodsReview">
		insert into goods_review (star,
		user_id,review_date,goods_id,review_title,review,image,review_id
		)
		values
		(#{star,jdbcType=BIGINT},
		#{userId,jdbcType=VARCHAR},
		#{reviewDate,jdbcType=VARCHAR},
		#{goodsId,jdbcType=BIGINT},
		#{reviewTitle,jdbcType=VARCHAR},
		#{review,jdbcType=VARCHAR},
		#{image,jdbcType=VARCHAR},
		#{reviewId,jdbcType=BIGINT}
		)
	</insert>

	<select id="getSearchHistory" resultType="String">
		select keyword from
		search_history
		group by keyword order by count(keyword) desc,date_time
		desc
	</select>

	<insert id="insertSearchHistory"
		parameterType="ltd.newbee.mall.entity.InsertSearchHistoryEntity">
		insert into search_history (user_id,date_time,keyword
		)
		values (#{userId,jdbcType=BIGINT},
		#{dateTime,jdbcType=VARCHAR},
		#{keyword,jdbcType=VARCHAR}
		)
	</insert>

	<select id="getGoodsName" parameterType="String"
		resultType="String">
		select goods_name from tb_newbee_mall_goods_info
		<where>
			<if test="keyword!=null and keyword!=''">
				and goods_name like CONCAT('%',#{keyword},'%')
			</if>
		</where>
		group by goods_name limit 0,5
	</select>

	<select id="getRecentChkHistory"
		resultType="ltd.newbee.mall.entity.RecentChkHistory">
		select
		goods_name,goods_cover_img,original_price,selling_price
		from
		recent_chk_goods a
		join tb_newbee_mall_goods_info b on
		a.goods_id=b.goods_id
		group by a.goods_id order by count(a.goods_id)
		desc,date_time desc
	</select>
	
	<insert id="insertGoodsQa"
		parameterType="ltd.newbee.mall.entity.GoodsQa">
		insert into goods_qa (goods_id,
		qa_id,question,question_date,answer,answer_date
		)
		values
		(#{goodsId,jdbcType=BIGINT},
		#{qaId,jdbcType=BIGINT},
		#{question,jdbcType=VARCHAR},
		#{questionDate,jdbcType=VARCHAR},
		#{answer,jdbcType=VARCHAR},
		#{answerDate,jdbcType=VARCHAR}
		)
	</insert>
	
	<select id="getMaxQaId" parameterType="Long" resultType="Long">
		select max(qa_id) from goods_qa
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
		</where>
	</select>
	
	<insert id="insertGoodsQaLike"
		parameterType="ltd.newbee.mall.entity.InsertGoodsQaLike">
		insert into qa_user (goods_id,
		qa_id,user_id
		)
		values
		(#{goodsId,jdbcType=BIGINT},
		#{qaId,jdbcType=BIGINT},
		#{userId,jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="insertGoodsReviewLike"
		parameterType="ltd.newbee.mall.entity.InsertGoodsReviewLike">
		insert into review_user (goods_id,
		review_id,user_id2
		)
		values
		(#{goodsId,jdbcType=BIGINT},
		#{reviewId,jdbcType=BIGINT},
		#{userId,jdbcType=VARCHAR}
		)
	</insert>
	
		<select id="getReviewLikeUserId" parameterType="Map" resultType="int">
		select count(*) FROM review_user
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
			and review_id = #{reviewId,jdbcType=BIGINT}
			and user_id2 = #{userId,jdbcType=VARCHAR}
		</where>
	</select>
	
	<select id="getMaxReviewId" parameterType="Long" resultType="Long">
		select max(review_id) from goods_review
		<where>
			goods_id = #{goodsId,jdbcType=BIGINT}
		</where>
	</select>
</mapper>

